apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  type: ClusterIP
  selector:
    component: user
  ports:
    - port: 5000
      name: http
      targetPort: 5000
  sessionAffinity: ClientIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deployment
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      component: user
  template:
    metadata:
      labels:
        component: user
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - user
            topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 60
      volumes:
        - name: state-storage
          persistentVolumeClaim:
            claimName: user-state-pvc
      containers:
        - name: user
          volumeMounts:
            - name: state-storage
              mountPath: /app/state
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
          image: user:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "1Gi"
              cpu: "1"
            requests:
              memory: "1Gi"
              cpu: "1"
          livenessProbe:     # Add health checks
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:      # Add startup probe
            httpGet:
              path: /health
              port: 5000
            failureThreshold: 30
            periodSeconds: 10
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Redis Cluster..."
              until redis-cli -h payment-redis-cluster -a redis cluster info | grep -q 'cluster_state:ok'; do
                sleep 5
              done
              python kafka_consumer.py &
              hypercorn -b 0.0.0.0:5000 -w 2 --worker-class asyncio --log-level=info app:app
          ports:
            - containerPort: 5000
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
            - name: REDIS_HOST
              value: payment-redis-cluster
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              value: "redis"
