apiVersion: v1
kind: Service
metadata:
  name: stock-service
spec:
  type: ClusterIP
  selector:
    component: stock
  ports:
    - port: 5000
      name: http
      targetPort: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stock-deployment
spec:
  replicas: 3  # 3 for fault tolerance
  selector:
    matchLabels:
      component: stock
  template:
    metadata:
      labels:
        component: stock
        app: microservice
    spec:
      containers:
        - name: stock
          image: stock:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "1Gi"
              cpu: "1"
            requests:
              memory: "1Gi"
              cpu: "1"
          readinessProbe:
            httpGet:
              path: /stock/find/healthcheck
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /stock/find/healthcheck
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 15
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Redis Cluster..."
              until redis-cli -h stock-redis-cluster -a redis cluster info | grep -q 'cluster_state:ok'; do
                sleep 5
              done
              python kafka_consumer.py &
              hypercorn -b 0.0.0.0:5000 -w 2 --worker-class asyncio --log-level=info app:app
          ports:
            - containerPort: 5000
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
            - name: REDIS_HOST
              value: stock-redis-cluster
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              value: "redis"
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: stock-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      component: stock
